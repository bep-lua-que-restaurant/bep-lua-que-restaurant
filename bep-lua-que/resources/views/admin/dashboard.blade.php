@extends('layouts.admin')

@section('title')
    Dashboard
@endsection
@section('content')
    <div class="container">
        <!-- K·∫øt qu·∫£ b√°n h√†ng h√¥m nay -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 text-center">
                        <h5>ƒê∆°n ƒë√£ xong</h5>
                        <p class="text-danger" style="font-size: 24px; font-weight: bold;">3,886,000</p>
                        <small class="text-muted">H√¥m qua: 6,055,000</small>
                    </div>
                    <div class="col-md-4 text-center">
                        <h5>ƒê∆°n ƒëang ph·ª•c v·ª•</h5>
                        <p class="text-success" style="font-size: 24px; font-weight: bold;">0</p>
                    </div>
                    <div class="col-md-4 text-center">
                        <h5>Kh√°ch h√†ng</h5>
                        <p class="text-danger" style="font-size: 24px; font-weight: bold;">3</p>
                        <small class="text-muted">H√¥m qua: 10</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title fw-bold">DOANH S·ªê <span id="timeRange">H√îM NAY</span></h5>
                <h5 class="text-primary fw-bold">
                    <i class="bi bi-info-circle"></i>
                    <span id="totalSales"></span>
                </h5>

                <!-- B·ªô l·ªçc th·ªùi gian -->
                <div class="d-flex justify-content-between align-items-center">
                    <select id="filter-type" class="form-select w-25">
                        <option value="day">Theo Ng√†y</option>
                        <option value="hour">Theo Gi·ªù</option>
                        <option value="weekday">Theo Th·ª©</option>
                    </select>

                    <select class="form-select w-auto" id="time-range" style="background-color: #f8f9fa; border: 1px solid #ced4da; padding: 5px 27px; border-radius: 5px; font-size: 14px;">
                        <option value="today">H√¥m nay</option>
                        <option value="yesterday">H√¥m qua</option>
                        <option value="last7days">7 Ng√†y Qua</option>
                        <option value="thismonth">Th√°ng n√†y</option>
                        <option value="lastmonth">Th√°ng tr∆∞·ªõc</option>
                    </select>
                </div>

                <!-- Bi·ªÉu ƒë·ªì -->
                <canvas id="thongKeChart" height="100"></canvas>
            </div>
        </div>
    </div>

    <!-- Nh√∫ng Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        let chart;
        const dataNgay = @json($dataNgay);
        const dataGio = @json($dataGio);
        const dataThu = @json($dataThu);

        function getChartData(type, timeRange) {
            let filteredData = [];

            function getVietnamDate(offset = 0) {
                let now = new Date();
                now.setHours(now.getHours() + 7); // Chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
                now.setDate(now.getDate() + offset);
                return now.toISOString().split('T')[0]; // YYYY-MM-DD
            }

            function convertDayNumberToLabel(dayNumber) {
                const daysMap = [
                    "Ch·ªß Nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"
                ];
                return daysMap[dayNumber] || "";
            }

            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            yesterday.setHours(0, 0, 0, 0);

            const today = new Date();
            const todayStr = getVietnamDate(0);
            const yesterdayStr = getVietnamDate(-1);
            const sevenDaysAgoStr = getVietnamDate(-6); // T√≠nh t·ª´ 6 ng√†y tr∆∞·ªõc + h√¥m nay = 7 ng√†y

            const currentMonth = today.getMonth() + 1;
            const currentYear = today.getFullYear();

            let lastMonth = new Date();
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            const lastMonthNumber = lastMonth.getMonth() + 1;
            const lastYear = lastMonth.getFullYear();

            if (type === 'day') {
                if (timeRange === 'today') {
                    filteredData = dataNgay.filter(item => item.label === todayStr);
                } else if (timeRange === 'yesterday') {
                    filteredData = dataNgay.filter(item => item.label === yesterdayStr);
                } else if (timeRange === 'last7days') {
                    let sevenDaysAgo = new Date();
                    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                    const sevenDaysAgoStr = sevenDaysAgo.toISOString().split('T')[0];
                    filteredData = dataNgay.filter(item => item.label >= sevenDaysAgoStr);
                } else if (timeRange === 'thismonth') {
                    const currentMonth = today.getMonth() + 1;
                    const currentYear = today.getFullYear();
                    filteredData = dataNgay.filter(item => {
                        const [year, month] = item.label.split('-');
                        return parseInt(year) === currentYear && parseInt(month) === currentMonth;
                    });
                } else if (timeRange === 'lastmonth') {
                    let lastMonth = new Date();
                    lastMonth.setMonth(lastMonth.getMonth() - 1);
                    const lastMonthNumber = lastMonth.getMonth() + 1;
                    const lastYear = lastMonth.getFullYear();
                    filteredData = dataNgay.filter(item => {
                        const [year, month] = item.label.split('-');
                        return parseInt(year) === lastYear && parseInt(month) === lastMonthNumber;
                    });
                }

                return {
                    labels: filteredData.map(item => item.label),
                    values: filteredData.map(item => Number(item.total)) // ‚úÖ Chuy·ªÉn sang ki·ªÉu s·ªë
                };
            } else if (type === 'hour') {
                let hourlyData = [];

                if (timeRange === 'today') {
                    hourlyData = dataGio.filter(item => item.date === todayStr);
                } else if (timeRange === 'yesterday') {
                    hourlyData = dataGio.filter(item => item.date === yesterdayStr);
                } else if (timeRange === 'last7days' || timeRange === 'thismonth' || timeRange === 'lastmonth') {
                    // L·ªçc d·ªØ li·ªáu theo b·ªô l·ªçc
                    const filteredGio = dataGio.filter(item => {
                        let itemDate = item.date.split(' ')[0]; // ‚úÖ B·ªè ph·∫ßn gi·ªù ph√∫t gi√¢y n·∫øu c√≥
                        const [year, month, day] = itemDate.split('-').map(num => parseInt(num));

                        if (timeRange === 'last7days') {
                            return itemDate >= sevenDaysAgoStr && itemDate <= todayStr;
                        } else if (timeRange === 'thismonth') {
                            return year === currentYear && month === currentMonth;
                        } else if (timeRange === 'lastmonth') {
                            return year === lastYear && month === lastMonthNumber;
                        }
                    });

                    let hourlyTotals = Array(24).fill(0);
                    let uniqueDates = new Set(filteredGio.map(item => item.date)); // X√°c ƒë·ªãnh s·ªë ng√†y c√≥ d·ªØ li·ªáu
                    let totalDays = uniqueDates.size; // S·ªë ng√†y th·ª±c s·ª± c√≥ d·ªØ li·ªáu

                    filteredGio.forEach(item => {
                        let hour = item.label; // üöÄ D√πng lu√¥n gi·ªù t·ª´ database, kh√¥ng c·∫ßn x·ª≠ l√Ω l·∫°i
                        let total = Number(item.total);

                        if (hour >= 0 && hour < 24) {
                            hourlyTotals[hour] += total;
                        }
                    });

                    // ‚úÖ Kh√¥ng c·∫ßn chia trung b√¨nh, gi·ªØ nguy√™n t·ªïng doanh thu theo gi·ªù
                    hourlyData = hourlyTotals.map((total, index) => ({
                        label: `${index}h`,
                        total: total
                    }));
                }

                return {
                    labels: hourlyData.map(item => item.label),
                    values: hourlyData.map(item => item.total)
                };
            } else if (type === 'weekday') {
                let filteredWeekData = [];

                // ‚úÖ Danh s√°ch th·ª© b·∫±ng ti·∫øng Vi·ªát
                const weekDays = ["Ch·ªß Nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"];

                if (timeRange === 'today') {
                    const currentDayLabel = weekDays[today.getDay()];
                    filteredWeekData = dataThu.filter(item => item.label === currentDayLabel);
                } if (timeRange === 'yesterday') {
                    const yesterdayDayLabel = convertDayNumberToLabel(yesterday.getDay());
                    filteredWeekData = dataThu.filter(item => item.label == yesterdayDayLabel);
                }

                else if (timeRange === 'last7days') {
                    const startOfPeriod = new Date();
                    startOfPeriod.setDate(today.getDate() - 6); // L·∫•y 6 ng√†y tr∆∞·ªõc h√¥m nay
                    startOfPeriod.setHours(0, 0, 0, 0); // ƒê·∫∑t v·ªÅ 00:00:00

                    const endOfPeriod = new Date();
                    endOfPeriod.setHours(23, 59, 59, 999); // K·∫øt th√∫c v√†o 23:59:59 h√¥m nay

                    console.log(`üìå L·ªçc d·ªØ li·ªáu t·ª´: ${startOfPeriod.toISOString()} ƒë·∫øn ${endOfPeriod.toISOString()}`);

                    filteredWeekData = dataThu.filter(item => {
                        if (!item.min_date) {
                            console.warn("‚ö†Ô∏è L·ªói: item.min_date b·ªã thi·∫øu!", item);
                            return false;
                        }

                        let itemDate = new Date(item.min_date);
                        itemDate.setHours(0, 0, 0, 0); // ƒê·∫£m b·∫£o kh√¥ng b·ªã l·ªách gi·ªù khi so s√°nh

                        return itemDate >= startOfPeriod && itemDate <= endOfPeriod;
                    });

                    console.log("‚úÖ D·ªØ li·ªáu sau khi l·ªçc (7 ng√†y qua, t√≠nh c·∫£ h√¥m nay):", filteredWeekData);
                }
                else if (timeRange === 'thismonth') {
                    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                    startOfMonth.setHours(0, 0, 0, 0);

                    const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                    endOfMonth.setHours(23, 59, 59, 999);

                    console.log(`üìå L·ªçc d·ªØ li·ªáu th√°ng n√†y: ${startOfMonth.toISOString()} -> ${endOfMonth.toISOString()}`);

                    filteredWeekData = dataThu.filter(item => {
                        if (!item.min_date) {
                            console.warn("‚ö†Ô∏è L·ªói: item.min_date b·ªã thi·∫øu!", item);
                            return false;
                        }

                        let itemDate = new Date(item.min_date);
                        return itemDate >= startOfMonth && itemDate <= endOfMonth;
                    });

                    console.log("‚úÖ D·ªØ li·ªáu sau khi l·ªçc (th√°ng n√†y):", filteredWeekData);
                } else if (timeRange === 'lastmonth') {
                    const startOfLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    startOfLastMonth.setHours(0, 0, 0, 0);

                    const endOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
                    endOfLastMonth.setHours(23, 59, 59, 999);

                    console.log(`üìå L·ªçc d·ªØ li·ªáu th√°ng tr∆∞·ªõc: ${startOfLastMonth.toISOString()} -> ${endOfLastMonth.toISOString()}`);

                    filteredWeekData = dataThu.filter(item => {
                        if (!item.min_date) {
                            console.warn("‚ö†Ô∏è L·ªói: item.min_date b·ªã thi·∫øu!", item);
                            return false;
                        }

                        let itemDate = new Date(item.min_date);
                        return itemDate >= startOfLastMonth && itemDate <= endOfLastMonth;
                    });


                    console.log("‚úÖ D·ªØ li·ªáu sau khi l·ªçc (th√°ng tr∆∞·ªõc):", filteredWeekData);
                }


                // üî• ‚úÖ **G·ªòP DOANH THU THEO TH·ª®** (Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ªông d·ªìn ti·ªÅn sai)
                let weekDataGrouped = {};
                filteredWeekData.forEach(item => {
                    if (!weekDataGrouped[item.label]) {
                        weekDataGrouped[item.label] = 0;
                    }
                    weekDataGrouped[item.label] += Number(item.total);
                });

                console.log("‚úÖ D·ªØ li·ªáu sau khi g·ªôp t·ªïng doanh thu theo th·ª©:", weekDataGrouped);

                return {
                    labels: Object.keys(weekDataGrouped), // Danh s√°ch th·ª©
                    values: Object.values(weekDataGrouped) // T·ªïng doanh thu t∆∞∆°ng ·ª©ng
                };
            }

        }

        function loadChart(type = 'day', timeRange = 'today') {
            const { labels, values } = getChartData(type, timeRange);
            console.log("Labels:", labels);
            console.log("Values:", values);
            const ctx = document.getElementById('thongKeChart').getContext('2d');

            // N·∫øu c√≥ bi·ªÉu ƒë·ªì c≈©, h·ªßy tr∆∞·ªõc khi v·∫Ω m·ªõi
            if (chart) {
                chart.destroy();
            }

            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Doanh S·ªë (VND)',
                        data: values,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        barPercentage: 0.8,        // ƒêi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
                        categoryPercentage: 0.9,   // ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch gi·ªØa c√°c c·ªôt
                        minBarLength: 5            // ƒê·∫£m b·∫£o c·ªôt nh·ªè v·∫´n hi·ªÉn th·ªã
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            suggestedMax: 12000000, // üëà ƒê·∫∑t tr·ª•c Y cao h∆°n 10 tri·ªáu m·ªôt ch√∫t
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN') + ' ƒë';
                                }
                            }
                        }
                    }
                }
            });
            chart.update();
        }

        document.getElementById('filter-type').addEventListener('change', function() {
            const timeRange = document.getElementById('time-range').value;
            loadChart(this.value, timeRange);
        });

        document.getElementById('time-range').addEventListener('change', function() {
            const chartType = document.getElementById('filter-type').value;
            loadChart(chartType, this.value);
        });

        loadChart();
    </script>
@endsection
