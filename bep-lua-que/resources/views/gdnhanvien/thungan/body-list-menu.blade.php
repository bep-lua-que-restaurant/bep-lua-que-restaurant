
{{-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" /> --}}
<style>
    /* Th√™m m·ªôt ch√∫t ki·ªÉu d√°ng ƒë·ªÉ "√¥ ch·ªØ" hi·ªÉn th·ªã l∆° l·ª≠ng */
    /* Ki·ªÉu d√°ng cho √¥ th√¥ng tin m√≥n ƒÉn */
    /* Ki·ªÉu d√°ng cho √¥ th√¥ng tin m√≥n ƒÉn */
    .info-wrapper {
        display: none;
        position: absolute;
        background-color: #E6F0FA;
        /* M√†u n·ªÅn xanh nh·∫°t */
        color: #333;
        /* M√†u ch·ªØ ch√≠nh */
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        z-index: 10;
        top: 0;
        left: 0%;
        /* V·ªã tr√≠ b√™n ph·∫£i */
        width: 150px;
        /* Chi·ªÅu r·ªông c·ªßa √¥ th√¥ng tin */
        animation: spinIn 0.5s ease-out;
        /* Hi·ªáu ·ª©ng spin v√†o */
    }

    .food-info-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .food-info-card:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .cooking-time {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: #333;
    }

    .icon {
        color: #ff6f61;
        /* M√†u cam nh·∫π nh√†ng, c√≥ th·ªÉ thay ƒë·ªïi */
        font-size: 16px;
    }

    .label {
        font-weight: 600;
        color: #555;
    }

    .value {
        background: #fff;
        padding: 4px 8px;
        border-radius: 4px;
        border: 1px solid #eee;
    }

    /* Hi·ªáu ·ª©ng tr∆∞·ª£t v√†o khi hi·ªÉn th·ªã */
    @keyframes slideIn {
        0% {
            transform: translateX(10px);
            opacity: 0;
        }

        100% {
            transform: translateX(0);
            opacity: 1;
        }
    }

    /* Hi·ªáu ·ª©ng ·∫©n d·∫ßn khi r·ªùi ƒëi */
    @keyframes slideOut {
        0% {
            transform: translateX(0);
            opacity: 1;
        }

        100% {
            transform: translateX(10px);
            opacity: 0;
        }
    }

    /* Khi √¥ th√¥ng tin b·ªã ·∫©n */
    .info-wrapper.hide {
        display: none;
        animation: slideOut 0.3s ease-out;
    }
</style>
<link href="{{ asset('admin/css/swiper-bundle.min.css') }}" rel="stylesheet" />
<div class="swiper mySwiper">
    <div class="swiper-wrapper">
        @foreach ($data->chunk(8) as $chunk)
            <!-- M·ªói slide ch·ª©a 12 m√≥n -->
            <div class="swiper-slide">
                <div class="row">
                    @foreach ($chunk as $monAn)
                        <div class="col-md-3 col-6 mb-2">
                            <div class="cardd card text-center p-1" data-banan-id="{{ $monAn->id }}">
                                <div class="card-body p-2 " style="cursor: pointer;">
                                    <!-- H√¨nh ·∫£nh m√≥n ƒÉn -->
                                    <img src="{{ asset('storage/' . optional($monAn->hinhAnhs->first())->hinh_anh) }}"
                                        class="img-thumbnail toggle-info"
                                        style="width: 100px; height: 100px; object-fit: cover;">
                                    <!-- T√™n m√≥n -->
                                    <h6 class="card-title" style="font-size: 12px;">{{ $monAn->ten }}</h6>

                                    <p class="card-text badge badge-danger " style="font-size: 10px;">
                                        {{ number_format($monAn->gia) }} VNƒê

                                    </p>
                                    <!-- N√∫t Th√™m m√≥n -->
                                    <button type="submit" class="btn btn-primary btn-sm add-mon-btn"
                                        style="padding: 2px 6px; font-size: 10px;">
                                        <i class="fa fa-plus"></i>
                                    </button>

                                    <!-- √î th√¥ng tin m√≥n ƒÉn, ·∫©n ban ƒë·∫ßu -->
                                    <div class="info-wrapper mt-1" id="info-wrapper-{{ $monAn->id }}"
                                        style="display: none;">
                                        <!-- √î hi·ªÉn th·ªã th√¥ng tin m√≥n -->
                                        <div class="food-info-card">
                                            <p class="cooking-time">
                                                <i class="fas fa-clock icon"></i>
                                                <span class="label">Th·ªùi gian n·∫•u:</span>
                                                <span class="value">
                                                    @php
                                                        $time = $monAn->thoi_gian_nau;
                                                        if ($time >= 1) {
                                                            // N·∫øu l√† ph√∫t (th·ªùi gian >= 1)
                                                            echo number_format($time, 0) . ' ph√∫t';
                                                        } else {
                                                            // N·∫øu l√† gi√¢y (th·ªùi gian < 1)
                                                            $seconds = round($time * 60);
                                                            echo $seconds . ' gi√¢y';
                                                        }
                                                    @endphp
                                                </span>
                                            </p>
                                        </div>
                                    </div>


                                </div>
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
        @endforeach
    </div>
</div>

<div class="text-center mt-2">
    <span id="pageIndicator">1 / 1</span>
</div>
<!-- N√∫t ƒëi·ªÅu h∆∞·ªõng T√ôY CH·ªàNH -->
<div class="text-centerr mt-3">
    <button id="prevBtn" class="btn btn-primary btn-sm px-4">‚¨Ö </button>
    <button id="nextBtn" class="btn btn-primary btn-sm px-4"> ‚û°</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<script>
    var swiper = new Swiper(".mySwiper", {
        slidesPerView: 1, // M·ªói l·∫ßn hi·ªÉn th·ªã 1 nh√≥m s·∫£n ph·∫©m
        spaceBetween: 20, // Kho·∫£ng c√°ch gi·ªØa c√°c nh√≥m
        allowTouchMove: true, // Cho ph√©p k√©o b·∫±ng chu·ªôt/tay
        grabCursor: true

    });

    // H√†m c·∫≠p nh·∫≠t s·ªë trang
    function updatePageIndicator() {
        var currentPage = swiper.activeIndex + 1; // Trang hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 1)
        var totalPages = swiper.slides.length; // T·ªïng s·ªë trang
        document.getElementById("pageIndicator").textContent =
            currentPage + " / " + totalPages;
    }

    // L·∫Øng nghe s·ª± ki·ªán khi ƒë·ªïi trang b·∫±ng n√∫t b·∫•m
    document.getElementById("nextBtn").addEventListener("click", function() {
        swiper.slideNext();
    });

    document.getElementById("prevBtn").addEventListener("click", function() {
        swiper.slidePrev();
    });

    // L·∫Øng nghe s·ª± ki·ªán khi k√©o/swipe b·∫±ng chu·ªôt ho·∫∑c tay
    swiper.on("slideChange", function() {
        updatePageIndicator();
    });

    // C·∫≠p nh·∫≠t s·ªë trang ban ƒë·∫ßu
    updatePageIndicator();

    toastr.options = {
        "closeButton": true,
        "debug": false,
        "newestOnTop": true, // Toast m·ªõi nh·∫•t hi·ªÉn th·ªã ·ªü tr√™n
        "progressBar": true,
        "positionClass": "toast-top-right", // V·ªã tr√≠: g√≥c tr√™n b√™n ph·∫£i
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000", // Toast t·ª± ·∫©n sau 5 gi√¢y
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };

    function showToast(message, type) {
        switch (type) {
            case 'success':
                toastr.success(message);
                break;
            case 'danger':
                toastr.error(message);
                break;
            case 'warning':
                toastr.warning(message);
                break;
            default:
                toastr.info(message);
                break;
        }
    }
    // t·∫°o h√≥a ƒë∆°n 
    window.luuIdHoaDon = null;
    $(document).ready(function() {
        $('.add-mon-btn').on('click', function() {
            var card = $(this).closest('.card'); // L·∫•y ph·∫ßn t·ª≠ card ch·ª©a m√≥n ƒÉn
            var banId = $('#ten-ban').data('currentBan'); // L·∫•y ID b√†n hi·ªán t·∫°i
            var monAnId = card.data('banan-id'); // L·∫•y ID m√≥n ƒÉn
            var giaMon = parseInt(card.find('.card-text').text().replace(/[^0-9]/g, "")); // L·∫•y gi√° m√≥n
            let nutHoaDon = document.querySelector(".nut-hoa-don");
            // Ki·ªÉm tra n·∫øu ch∆∞a ch·ªçn b√†n
            if (!banId) {
                showToast("üö® Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi th√™m m√≥n", "warning");
                return;
            }

            capNhatHoaDon(monAnId, card.find('.card-title').text(), giaMon);

            // G·ª≠i AJAX ƒë·ªÉ t·∫°o h√≥a ƒë∆°n v√† th√™m m√≥n ƒÉn
            $.ajax({
                url: "{{ route('thungan.createHoaDon') }}",
                method: "POST",
                data: {
                    _token: "{{ csrf_token() }}",
                    ban_an_id: banId,
                    mon_an_id: monAnId,
                    gia: giaMon
                },
                success: function(response) {
                    let tenMon = response.ten_mon
                    console.log(response)
                    window.luuIdHoaDon = response.data.id;
                    var maHoaDonElement = document.getElementById("maHoaDon");
                    maHoaDonElement.innerText = response.data.ma_hoa_don;
                    maHoaDonElement.style.color = "#28a745";
                    nutHoaDon.style.display = "block";
                    showToast("üçΩÔ∏è ƒê√£ th√™m m√≥n " + tenMon + " v√†o h√≥a ƒë∆°n", "success");
                    // T√¨m ID chi ti·∫øt h√≥a ƒë∆°n t∆∞∆°ng ·ª©ng v·ªõi m√≥n ƒÉn
                    let timMon = response.data.chi_tiet_hoa_dons.find(item => item
                        .mon_an_id == monAnId);
                    if (timMon) {
                        // G√°n ID chi ti·∫øt h√≥a ƒë∆°n v√†o n√∫t x√≥a
                        $(`tr[data-id-mon="${monAnId}"] .xoa-mon-an`).attr("data-id-xoa",
                            timMon.id);
                        // L·∫•y t·∫•t c·∫£ c√°c n√∫t ghi ch√∫ c√≥ data-id l√† monAnId v√† thay ƒë·ªïi data-id c·ªßa n√≥
                        $(`i[data-id="${monAnId}"].toggle-ghi-chu`).attr("data-id", timMon
                            .id);

                        $(`input[data-id="${monAnId}"].ghi-chu-input`).attr("data-id",
                            timMon.id);


                        $(`i[data-id="${monAnId}"].save-ghi-chu`).attr("data-id", timMon
                            .id);
                    }

                },
                error: function(xhr, status, error) {
                    console.error("L·ªói khi th√™m m√≥n v√†o h√≥a ƒë∆°n:", xhr);
                    console.log("Tr·∫°ng th√°i l·ªói:", status);
                    console.log("Chi ti·∫øt l·ªói:", error);
                    console.log("Response:", xhr.responseText);
                }

            });

            function capNhatHoaDon(monAnId, tenMon, giaMon) {
                let tbody = $("#hoa-don-body");
                let existingRow = $(`tr[data-id-mon="${monAnId}"]`);

                // X√≥a d√≤ng "Ch∆∞a c√≥ m√≥n n√†o trong ƒë∆°n" n·∫øu c√≥
                if ($(".empty-invoice").length) {
                    $(".empty-invoice").closest("tr").remove();
                }

                if (existingRow.length) {
                    // N·∫øu m√≥n ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng v√† c·∫≠p nh·∫≠t t·ªïng gi√°
                    let soLuongSpan = existingRow.find(".so-luong").first();

                    let soLuongMoi = parseInt(soLuongSpan.text()) + 1;
                    soLuongSpan.text(soLuongMoi);

                    let tongTienCell = existingRow.find(".text-end:last");
                    tongTienCell.text((soLuongMoi * giaMon).toLocaleString("vi-VN") + " VNƒê");

                    existingRow.addClass("table-primary");
                    setTimeout(() => {
                        existingRow.removeClass("table-primary");
                    }, 400);
                } else {
                    // N·∫øu m√≥n ch∆∞a c√≥, th√™m m·ªõi v√†o b·∫£ng h√≥a ƒë∆°n
                    let row = $(`
            <tr class="table-primary" data-id-mon="${monAnId}">
                <td class="small">${tbody.children().length + 1}</td>
                <td class="small">
                     <i class="bi bi-pencil-square text-primary toggle-ghi-chu" style="cursor: pointer;" data-id="${monAnId}"></i>
                    ${tenMon}
                            <!-- √î nh·∫≠p ghi ch√∫, ·∫©n ban ƒë·∫ßu -->
<div class="ghi-chu-wrapper mt-1" style="display: none;">
    <div class="d-flex align-items-center gap-2">
        <!-- √î nh·∫≠p ghi ch√∫ -->
        <input type="text" class="form-control ghi-chu-input form-control-sm ghi-chu-input"
               placeholder="Nh·∫≠p ghi ch√∫..." 
               value=" ""}" 
               data-id="${monAnId}" style="flex: 1;">
        
        <!-- N√∫t l∆∞u (bi·ªÉu t∆∞·ª£ng V) -->
        <i class="bi bi-check-circle-fill text-success save-ghi-chu" style="cursor: pointer; font-size: 20px;" data-id="${monAnId}"></i>
    </div>
                    </td>
                <td class="text-center">
                    <i class="bi bi-dash-circle text-danger giam-soluong" data-id="${monAnId}" style="cursor: pointer; font-size: 20px;"></i>
                    <span class="so-luong mx-2 small">1</span>
                    <i class="bi bi-plus-circle text-success tang-soluong" data-id="${monAnId}" style="cursor: pointer; font-size: 20px;"></i>
                </td>
<td class="text-end small don-gia">
    ${giaMon.toLocaleString("vi-VN")} VNƒê
</td>
<td class="text-end small thanh-tien">
    ${(1 * giaMon).toLocaleString("vi-VN")} VNƒê
</td>
                <td class="text-center">
                    <button class="btn btn-sm btn-outline-danger xoa-mon-an" data-id="${monAnId}">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        `);
                    tbody.append(row);
                    setTimeout(() => {
                        row.removeClass("table-primary");
                    }, 400);
                }

                tinhTongHoaDon(); // C·∫≠p nh·∫≠t t·ªïng h√≥a ƒë∆°n
            }

            function tinhTongHoaDon() {
                let tongTien = 0;
                $("#hoa-don-body tr").each(function() {
                    let tongTienMon = $(this).find("td.text-end:last").text().replace(/[^0-9]/g,
                        "");
                    tongTien += parseInt(tongTienMon);
                });

                $("#tong-tien").text(
                    tongTien.toLocaleString("vi-VN") + " VNƒê"
                );
            }
            let isRequesting = false;
            // Ch·ªâ √°p d·ª•ng s·ª± ki·ªán trong container c√≥ ID "hoa-don-body"
            $("#hoa-don-body").off("click", ".xoa-mon-an").on("click", ".xoa-mon-an", function() {
                let monAnId = $(this).data("id-xoa");
                let xoaTr = $(this).closest("tr");
                deleteMonAn(monAnId, xoaTr);
            });

            $(".tang-soluong, .giam-soluong").off("click").on("click", function() {
                let monAnId = $(this).data("id");
                let thayDoi = $(this).hasClass('tang-soluong') ? 1 : -1;
                updateSoLuong($(this), monAnId, thayDoi);
            });


            // H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m√≥n ƒÉn
            function updateSoLuong(nutDuocClick, monAnId, thayDoi) {
                let dongChuaNo = nutDuocClick.closest("tr");

                let nutXoa = dongChuaNo.find(".xoa-mon-an"); // T√¨m n√∫t x√≥a trong h√†ng ƒë√≥
                let monUpdate = nutXoa.data("id-xoa"); // L·∫•y gi√° tr·ªã data-id-xoa
                if (monUpdate == undefined) {
                    monUpdate = dongChuaNo.attr("id").replace("mon-", "");;
                }

                let soLuongSpan = dongChuaNo.find(".so-luong").first();
                let soLuong = parseInt(soLuongSpan.text()) + thayDoi;
                if (soLuong < 1) {
                    soLuong = 1; // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng kh√¥ng nh·ªè h∆°n 1
                }
                soLuongSpan.text(soLuong);
                let thanhTien = dongChuaNo.find(".thanh-tien").first();
                $.ajax({
                    url: "/hoa-don/update-quantity",
                    method: "POST",
                    data: {
                        mon_an_id: monUpdate,
                        thay_doi: thayDoi,
                        _token: $('meta[name="csrf-token"]').attr(
                            "content"), // N·∫øu d√πng Laravel
                    },
                    success: function(response) {
                        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn

                        let formattedThanhTien = Number(
                            response.thanh_tien
                        ).toLocaleString("vi-VN") + " VNƒê";

                        thanhTien.text(formattedThanhTien);

                        let tongTien = 0;
                        $("#hoa-don-body tr").each(function() {
                            let tongTienMon = $(this)
                                .find("td.text-end:last")
                                .text()
                                .replace(/[^0-9]/g, "");
                            tongTien += parseInt(tongTienMon);
                        });
                        $("#tong-tien").text(
                            parseFloat(tongTien).toLocaleString("vi-VN") + " VNƒê"
                        );
                    },
                    error: function(xhr) {
                        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", xhr.responseText);
                    },
                });
            }

            function tinhTongHoaDon() {
                let tongTien = 0;
                $("#hoa-don-body tr").each(function() {
                    let tongTienMon = $(this).find("td.text-end:last").text().replace(/[^0-9]/g,
                        "");
                    tongTien += parseInt(tongTienMon);
                });

                // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng l·∫°i s·ªë ti·ªÅn ƒë√∫ng c√°ch
                $("#tong-tien").text(
                    parseFloat(tongTien).toLocaleString("vi-VN") + " VNƒê"
                );
            }

            function deleteMonAn(monAnId, xoaTr = null) {
                if (isRequesting) return;
                isRequesting = true;
                $.ajax({
                    url: apiUrlXoaMon,
                    method: "POST",
                    data: {
                        mon_an_id: monAnId,
                        check_status_only: true,
                        _token: $('meta[name="csrf-token"]').attr("content"),
                    },
                    success: function(response) {
                        isRequesting = false;

                        if (!response.success) {
                            Swal.fire("L·ªói!", response.error ||
                                "Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i m√≥n ƒÉn.", "error");
                            return;
                        }

                        const {
                            trang_thai,
                            message
                        } = response;

                        if (trang_thai === "cho_xac_nhan") {
                            Swal.fire({
                                title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn?",
                                text: "B·∫°n mu·ªën x√≥a m√≥n n√†y?",
                                icon: "question",
                                showCancelButton: true,
                                confirmButtonText: "X√≥a",
                                cancelButtonText: "Tho√°t",
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    sendDeleteRequest(monAnId, null, true, xoaTr);
                                }
                            });
                        } else {
                            Swal.fire({
                                title: "X√°c nh·∫≠n h·ªßy m√≥n",
                                text: message,
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonText: "H·ªßy m√≥n",
                                cancelButtonText: "Tho√°t",
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    Swal.fire({
                                        title: "L√Ω do h·ªßy m√≥n:",
                                        input: "text",
                                        inputLabel: "Ghi ch√∫ l√Ω do h·ªßy m√≥n",
                                        inputPlaceholder: "VD: Kh√°ch ƒë·ªïi √Ω...",
                                        inputValidator: (value) => (!value ?
                                            "Vui l√≤ng nh·∫≠p l√Ω do!" :
                                            null),
                                        showCancelButton: true,
                                        confirmButtonText: "X√°c nh·∫≠n",
                                        cancelButtonText: "Tho√°t",
                                    }).then((inputResult) => {
                                        if (inputResult.isConfirmed) {
                                            sendDeleteRequest(monAnId,
                                                inputResult.value, true,
                                                xoaTr);
                                        }
                                    });
                                }
                            });
                        }
                    },
                    error: function(xhr) {
                        isRequesting = false;
                        Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i m√≥n ƒÉn.", "error");
                        console.error("L·ªói khi l·∫•y tr·∫°ng th√°i m√≥n:", xhr);
                    },
                });
            }

            function sendDeleteRequest(monAnId, lyDo = null, forceDelete = false, xoaTr = null) {
                if (isRequesting) return;

                isRequesting = true;
                $.ajax({
                    url: apiUrlXoaMon,
                    method: "POST",
                    data: {
                        mon_an_id: monAnId,
                        ly_do: lyDo,
                        force_delete: forceDelete,
                        _token: $('meta[name="csrf-token"]').attr("content"),
                    },
                    success: function(response) {
                        isRequesting = false;

                        if (response.requires_confirmation) return;

                        // X√≥a d√≤ng m√≥n ƒÉn kh·ªèi b·∫£ng
                        if (xoaTr) {
                            xoaTr.remove();
                        } else {
                            $(`#mon-${monAnId}`).remove();
                        }

                        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
                        $("#tong-tien").text(
                            parseFloat(response.tong_tien).toLocaleString("vi-VN") +
                            " VNƒê"
                        );

                        // Th√¥ng b√°o th√†nh c√¥ng
                        Swal.fire("OK!", lyDo ? "M√≥n ƒë√£ ƒë∆∞·ª£c h·ªßy." : "M√≥n ƒë√£ b·ªã x√≥a.",
                            "success");
                    },
                    error: function(xhr) {
                        isRequesting = false;
                        Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ x·ª≠ l√Ω m√≥n ƒÉn.", "error");
                        console.error("L·ªói AJAX:", xhr.responseText);
                    },
                });
            }


        });
    });

    $(document).ready(function() {
        // Khi nh·∫•p v√†o to√†n b·ªô m√≥n ƒÉn (th·∫ª card-body)
        $('.toggle-info').click(function(event) {
            var id = $(this).closest('.card').data(
                'banan-id'); // L·∫•y ID c·ªßa m√≥n ƒÉn t·ª´ attribute data-banan-id
            var infoWrapper = $('#info-wrapper-' + id); // L·∫•y ph·∫ßn th√¥ng tin c·ªßa m√≥n ƒÉn

            // ·∫®n t·∫•t c·∫£ c√°c √¥ th√¥ng tin tr∆∞·ªõc khi hi·ªÉn th·ªã √¥ th√¥ng tin c·ªßa m√≥n ƒÉn hi·ªán t·∫°i
            $('.info-wrapper').not(infoWrapper).slideUp(200);

            // Hi·ªÉn th·ªã ho·∫∑c ·∫©n √¥ th√¥ng tin c·ªßa m√≥n ƒÉn hi·ªán t·∫°i
            infoWrapper.toggle(); // Thay ƒë·ªïi tr·∫°ng th√°i hi·ªÉn th·ªã c·ªßa √¥ th√¥ng tin

            // Ng·ª´ng s·ª± ki·ªán ƒë·ªÉ kh√¥ng l√†m n√≥ b·∫Øn ra ngo√†i
            event.stopPropagation();
        });

        // ƒê√≥ng √¥ th√¥ng tin khi click ra ngo√†i
        $(document).on("click", function(event) {
            // Ki·ªÉm tra n·∫øu click ra ngo√†i ph·∫ßn t·ª≠ th√¥ng tin v√† kh√¥ng ph·∫£i m√≥n ƒÉn
            if (!$(event.target).closest('.info-wrapper').length) {
                // ·∫®n t·∫•t c·∫£ c√°c √¥ th√¥ng tin
                $('.info-wrapper').slideUp(200);
            }
        });
    });
</script>
